# basic modules

# external modules
from nextcord.ext import commands

# local modules
from dbcon import db_load


class Movies(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("MoviesDB cog loaded successfully")

    @commands.command(name="add_movie", aliases=["am", "–¥–æ–±–∞–≤–∏—Ç—å_—Ñ–∏–ª—å–º", "–¥—Ñ"], help="–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ")
    async def add_movie(self, ctx, movie):
        movie = (movie, False)
        status = db_load("insert", "movies", movie)
        if status != "INSERT 0":
            await ctx.message.add_reaction("üëç")
        else:
            await ctx.message.add_reaction("‚ùì")

#    # debug command. Commented for the time being.
#    @commands.command(name="movies_all", aliases=[], help="–ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –ë–î")
#    async def print_movies(self, ctx):
#        movie_list = list()
#        cur = conn.cursor()
#        cur.execute("SELECT * FROM movies")
#        for _ in range(cur.rowcount):
#            movie_list += (cur.fetchone())
#        await ctx.send(movie_list)

    @commands.command(name="movies_watch", aliases=["movies", "movie", "–∫–∏–Ω–æ", "—Ñ–∏–ª—å–º—ã"], help="–ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –µ—â–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –ë–î")
    async def print_movies_unwatched(self, ctx):
        movie_list = db_load("select", "movies", "title", "not_watched")
        for movie in movie_list:
            await ctx.send(movie[0])

    @commands.command(name="delete_movie", aliases=["dm", "—É–¥–∞–ª–∏_—Ñ–∏–ª—å–º", "—É—Ñ"], help="–£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    async def delete_movie(self, ctx, movie):
        status = db_load("delete", "movies", movie)
        if status != "DELETE 0":
            await ctx.message.add_reaction("‚ö°")
        else:
            await ctx.message.add_reaction("‚ùì")

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        emoji = payload.emoji.name
        if emoji == "üëÅÔ∏è":
            channel = await self.bot.fetch_channel(payload.channel_id)
            message = await channel.fetch_message(payload.message_id)
            status = db_load("update", "movies", message.content)
            if status != "UPDATE 0":
                await message.add_reaction("üëç")
            else:
                await message.add_reaction("‚ùì")

#    @MovieBot.event
#    async def on_reaction_remove(self, reaction, user):
#        print('So, you have chosen oblivion.')
#        await reaction.message.channel.send(f'So, you have chosen oblivion.')
#        if user != MovieBot.user:
#            await reaction.message.channel.send(f'–£–≤–∏–¥–µ–Ω–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥–µ—à—å. –ù–æ —è –ø–æ–ø—Ä–æ–±—É—é.')
#            cur = conn.cursor()
#            cur.execute("update movies set watched=false where title=%s", [reaction.message.content])
#            conn.commit()
#            cur.close()

#    @commands.Cog.listener()
#    async def on_raw_reaction_add(self, payload):
#        print(payload)
#        channel = self.bot.get_channel(payload.channel_id)
#        if self.bot.get_user(payload.user_id) != self.bot.user:
#            await channel.send(f'–£–≤–∏–¥–µ–Ω–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥–µ—à—å. –ù–æ —è –ø–æ–ø—Ä–æ–±—É—é.')
#            cur = conn.cursor()
#            txt = await channel.fetch_message(payload.message_id)
#            cur.execute("update movies set watched=false where title=%s", [str(txt.content)])
#            conn.commit()
#            cur.close()


def setup(bot):
    bot.add_cog(Movies(bot))
